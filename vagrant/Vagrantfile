Vagrant.configure("2") do |config|

  # Tell Vagrant where would you like to start your VMs (you can also have a
  # specific per-VM configuration. Do not put this section in case you want to
  # start your VMs on the same host)
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = 'kvm'
    libvirt.memory = 1024
    libvirt.cpus = 2
  end

  # Let's provision it by running a script. You can also run
  # puppet, chef, ansible, and others. Check the Vagrant website for
  # details.
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "../playbooks/vmx.yml"
    ansible.groups = {
      "routers" => ["vRX1"]
    }
  end

  # Machines are Ubuntu 14.04 boxes
  config.vm.box = "ubuntu/trusty64"

  # Here's our VM configuration
  config.vm.define "vRX1" do |machine|

    # Hostname
    machine.vm.hostname = "vRX1"

    # Put vMX mgmt NIC in its own network
    machine.vm.network :private_network, ip: "192.168.199.11",
      :mac => "0A:00:DD:01:00:01",
      :libvirt__adapter => 1,
      :libvirt__network_name => 'vMX_mgmt'
      
    # With several private NICs
    [2, 3, 4, 5].each do |adapter|
      machine.vm.network :private_network, ip: "1.1.1.#{adapter}",
        :mac => "0A:00:DD:01:00:0#{adapter}",
        :libvirt__network_mask => '255.255.255.255',
        :libvirt__forward_mode => 'none',
        :libvirt__adapter => adapter,
        :libvirt__dhcp_enabled => false
    end
  end

end
