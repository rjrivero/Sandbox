Vagrant.configure("2") do |config|

  # Tell Vagrant where would you like to start your VMs (you can also have a
  # specific per-VM configuration. Do not put this section in case you want to
  # start your VMs on the same host)
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = 'kvm'
  end

  # Let's provision it by running a script. You can also run
  # puppet, chef, ansible, and others. Check the Vagrant website for
  # details.
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "../playbooks/gns3.yml"
    ansible.groups = {
      "gns3" => ["gns3"]
    }
  end

  # Machines are Ubuntu 14.04 boxes
  config.vm.box = "ubuntu/trusty64"

  # Here's our VM configuration
  config.vm.define "gns3" do |machine|

    # Set memory and number of CPUs
    machine.vm.provider :libvirt do |libvirt|
      libvirt.memory = 12288
      libvirt.cpus = 2
    end

    # Hostname
    machine.vm.box = "ubuntu/trusty64"
    machine.vm.hostname = "gns3"

    # Create dedicated mgmt network for vMX instances, and link it
    # to dedicated bridge 'vMX_mgmt'
    machine.vm.network :private_network, ip: "192.168.199.10",
      :mac => "0A:00:DD:00:01:01",
      :libvirt__adapter => 1,
      :libvirt__network_name => 'vMX_mgmt'
     
    # Cambio de enfoque: en vez de una maquina por cada instancia vMX,
    # Vamos a poner todas las instancias en un solo servidor GNS3.
    # With several private NICs
    #[2, 3, 4, 5].each do |adapter|
    #  machine.vm.network :private_network, ip: "1.1.1.#{adapter}",
    #    :mac => "0A:00:DD:01:01:0#{adapter-2}",
    #    :libvirt__network_mask => '255.255.255.255',
    #    :libvirt__forward_mode => 'none',
    #    :libvirt__adapter => adapter,
    #    :libvirt__dhcp_enabled => false
    #end
  end

end
